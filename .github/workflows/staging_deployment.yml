name: staging_deployment

on:
  push:
    tags:
      - v**-staging

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setting up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build Docker image
        run: docker build -t gotem-api . --no-cache

      - name: Push Docker Image to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
          docker tag gotem-api:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/gotem-api:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/gotem-api:latest

      - name: SSH to EC2 Instance
        run: |
          mkdir ~/.ssh
          echo -e "${{ secrets.STAGING_PRIVATE_KEY }}" > ~/.ssh/dec-keypair
          chmod 400 ~/.ssh/dec-keypair
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/dec-keypair ${{ secrets.STAGING_USERNAME }}@${{ secrets.STAGING_HOST }} \
            'cd ${{ secrets.STAGING_PATH }} && \  
            sudo aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}" && \
            sudo aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}" && \
            sudo aws configure set default.region "${{ secrets.AWS_REGION }}" && \
            sudo aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com && \
            sh deploy_staging.sh'